{"version":3,"sources":["Chat/index.tsx","Login/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["socket","Chat","userName","useState","users","setUsers","message","setMessage","messages","setMessages","useEffect","io","emit","on","msgs","className","map","text","Math","random","value","onChange","e","target","onClick","user","name","id","Login","setUserName","to","axios","get","then","data","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6GAKIA,E,uFAwEWC,EAtEG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAAmB,EACTC,qBADS,mBAC5BC,EAD4B,KACrBC,EADqB,OAELF,mBAAiB,IAFZ,mBAE5BG,EAF4B,KAEnBC,EAFmB,OAGHJ,mBAAc,IAHX,mBAG5BK,EAH4B,KAGlBC,EAHkB,KAInCC,qBAAU,WACFR,KACAF,EAASW,aATJ,0BAWEC,KAAK,OAAQ,CAACV,aAErBF,EAAOa,GAAG,YAAY,SAACP,GACnBG,GAAY,SAACK,GAAD,4BAAyBA,GAAzB,CAA+BR,UAG/CN,EAAOa,GAAG,aAAa,SAACP,GACpBG,GAAY,SAACK,GAAD,4BAAyBA,GAAzB,CAA+BR,UAG/CN,EAAOa,GAAG,eAAe,SAACP,GAEtBG,GAAY,SAACK,GAAD,4BAAyBA,GAAzB,CAA+BR,UAG/CN,EAAOa,GAAG,cAAc,YAAmB,IAAjBT,EAAgB,EAAhBA,MACtBC,EAASD,SAIlB,CAACF,IASJ,OACI,qBAAKa,UAAU,YAAf,SACKb,EACG,sBAAKa,UAAU,OAAf,UACI,qBAAKA,UAAU,gBAAf,SACKP,EAAWA,EAASQ,KAAI,SAACV,GAAD,OACrB,8BACKA,EAAQW,MADHC,KAAKC,aAGd,KAET,sBAAKJ,UAAU,aAAf,UACI,uBAAOA,UAAU,mBACVK,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAWe,EAAEC,OAAOH,UAC5C,wBACIL,UAAU,qBACVS,QAAS,SAACF,GAvB1BhB,IACAN,EAAOY,KAAK,UAAWN,GACvBC,EAAW,MAmBC,qBAMJ,sBAAKQ,UAAU,QAAf,oBAA8B,uBACzBX,EAAQA,EAAMY,KAAI,SAACS,GAAD,OACf,8BACKA,EAAKC,MADAD,EAAKE,OAGd,SACJ,gCCnCVC,EA7BD,WAAO,IAAD,EACgBzB,mBAAc,IAD9B,mBACTD,EADS,KACC2B,EADD,OAEQ1B,mBAAiB,QAFzB,6BAWhB,OACI,eAAC,IAAD,WACMD,EAGY,6BAFV,cAAC,IAAD,CAAM4B,GAAG,QAAT,SACI,wBAAQN,QAAS,WAX7BO,IAAMC,IAAN,UANS,wBAMT,kBACKC,MAAK,SAACC,GACCA,GAAQA,EAAKA,MAAQA,EAAKA,KAAKhC,UAC/B2B,EAAYK,EAAKA,KAAKhC,cAQtB,sBAGR,cAAC,IAAD,UACI,cAAC,IAAD,CAAOiC,KAAK,QAAZ,SACI,cAAC,EAAD,CACIjC,SAAUA,YCfnBkC,EATH,WACV,OACE,sBAAKrB,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCMOsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.cbe5a333.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {io} from 'socket.io-client'\nimport { IMessages } from './interface';\n\nconst ENDPOINT = 'http://localhost:4001'\nlet socket: any;\n\nconst Chat: any = ({userName}: any) => {\n    const [users, setUsers] = useState<any>();\n    const [message, setMessage] = useState<string>('')\n    const [messages, setMessages] = useState<any>([])\n    useEffect(() => {\n        if (userName) {\n            socket = io(ENDPOINT)\n\n            socket.emit('join', {userName})\n\n            socket.on('new_join', (message: string) => {\n                setMessages((msgs: IMessages) => [...msgs, message]);\n            })\n\n            socket.on('new_leave', (message: string) => {\n                setMessages((msgs: IMessages) => [...msgs, message]);\n            })\n\n            socket.on('new_message', (message: string) => {\n\n                setMessages((msgs: IMessages) => [...msgs, message]);\n            })\n\n            socket.on('room_users', ({users}: any) => {\n                setUsers(users);\n            });\n        }\n\n    }, [userName])\n\n    const sendMessage = () => {\n        if (message) {\n            socket.emit('message', message)\n            setMessage('')\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            {userName ?\n                <div className=\"chat\">\n                    <div className=\"chat-messages\">\n                        {messages ? messages.map((message: any) => (\n                            <div key={Math.random()}>\n                                {message.text}\n                            </div>\n                        )) : ''}\n                    </div>\n                    <div className=\"chat-input\">\n                        <input className=\"chat-input__area\"\n                               value={message}\n                               onChange={(e) => setMessage(e.target.value)}/>\n                        <button\n                            className=\"chat-input__button\"\n                            onClick={(e) => sendMessage()}\n                        >Send\n                        </button>\n                    </div>\n                    <div className=\"users\">Users: <br/>\n                        {users ? users.map((user: any) => (\n                            <div key={user.id}>\n                                {user.name}\n                            </div>\n                        )) : ''}</div>\n                </div> : <></>\n            }\n        </div>\n    )\n}\n\nexport default Chat;\n","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport axios from 'axios'\nimport Chat from '../Chat';\n\nconst ENDPOINT = 'http://localhost:4001'\n\nconst Login = () => {\n    const [userName, setUserName] = useState<any>('')\n    const [room, setRoom] = useState<string>('chat')\n    const getUserName = () => {\n        axios.get(`${ENDPOINT}/public/login`)\n            .then((data) => {\n                if (data && data.data && data.data.userName)\n                    setUserName(data.data.userName)\n            })\n    }\n\n    return (\n        <Router>\n            {!userName ?\n                <Link to='/chat'>\n                    <button onClick={() => getUserName()}> Login</button>\n                </Link> : <></>}\n\n            <Switch>\n                <Route path='/chat'>\n                    <Chat\n                        userName={userName}\n                    />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default Login;\n","import React, {useEffect, useState} from 'react';\nimport Login from \"./Login\";\nimport Chat from './Chat'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Login/>\n        <Chat/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}